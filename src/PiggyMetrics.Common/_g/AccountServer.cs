// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/account.proto
#region Designer generated code

using System; 
using System.Threading.Tasks; 
using DotBPE.Rpc; 
using DotBPE.Protocol.Amp; 
using Google.Protobuf; 

namespace PiggyMetrics.Common {

//start for class AbstractAccountService
public abstract class AccountServiceBase : ServiceActorBase 
{
public override string Id => "1001$0";
//调用委托
private async Task<AmpMessage> ProcessFindByNameAsync(AmpMessage req)
{
FindAccountReq request = null;
if(req.Data == null ){
   request = new FindAccountReq();
}
else {
request = FindAccountReq.Parser.ParseFrom(req.Data);
}
var data = await FindByNameAsync(request);
var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
response.Sequence = req.Sequence;
response.Data = data.ToByteArray();
return response;
}

//抽象方法
public abstract Task<AccountRsp> FindByNameAsync(FindAccountReq request);
//调用委托
private async Task<AmpMessage> ProcessCreateAsync(AmpMessage req)
{
UserReq request = null;
if(req.Data == null ){
   request = new UserReq();
}
else {
request = UserReq.Parser.ParseFrom(req.Data);
}
var data = await CreateAsync(request);
var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
response.Sequence = req.Sequence;
response.Data = data.ToByteArray();
return response;
}

//抽象方法
public abstract Task<AccountRsp> CreateAsync(UserReq request);
//调用委托
private async Task<AmpMessage> ProcessSaveAsync(AmpMessage req)
{
AccountReq request = null;
if(req.Data == null ){
   request = new AccountReq();
}
else {
request = AccountReq.Parser.ParseFrom(req.Data);
}
var data = await SaveAsync(request);
var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
response.Sequence = req.Sequence;
response.Data = data.ToByteArray();
return response;
}

//抽象方法
public abstract Task<VoidRsp> SaveAsync(AccountReq request);
public override Task<AmpMessage> ProcessAsync(AmpMessage req)
{
switch(req.MessageId){
//方法AccountService.FindByName
case 1: return this.ProcessFindByNameAsync(req);
//方法AccountService.Create
case 2: return this.ProcessCreateAsync(req);
//方法AccountService.Save
case 3: return this.ProcessSaveAsync(req);
default: return base.ProcessNotFoundAsync(req);
}
}
}
//end for class AbstractAccountService
}

#endregion

